; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @_fg_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, %3, !dbg !14
  %12 = sext i32 %10 to i64, !dbg !15
  %13 = getelementptr half, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !16
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !16
  %extelt.offset = lshr i32 %15, 16, !dbg !16
  %extelt.offset1 = lshr i32 %16, 16, !dbg !16
  %extelt.offset2 = lshr i32 %17, 16, !dbg !16
  %extelt.offset3 = lshr i32 %18, 16, !dbg !16
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %12, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %extelt.offset4 = lshr i32 %21, 16, !dbg !18
  %extelt.offset5 = lshr i32 %22, 16, !dbg !18
  %extelt.offset6 = lshr i32 %23, 16, !dbg !18
  %extelt.offset7 = lshr i32 %24, 16, !dbg !18
  %25 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %26 = insertelement <2 x i32> %25, i32 %extelt.offset3, i64 1, !dbg !16
  %27 = trunc <2 x i32> %26 to <2 x i16>, !dbg !16
  %28 = bitcast <2 x i16> %27 to <2 x half>, !dbg !16
  %29 = fpext <2 x half> %28 to <2 x float>, !dbg !19
  %30 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %31 = insertelement <2 x i32> %30, i32 %extelt.offset7, i64 1, !dbg !18
  %32 = trunc <2 x i32> %31 to <2 x i16>, !dbg !18
  %33 = bitcast <2 x i16> %32 to <2 x half>, !dbg !18
  %34 = extractelement <2 x float> %29, i64 0, !dbg !20
  %35 = fsub float 0.000000e+00, %34, !dbg !20
  %36 = extractelement <2 x float> %29, i64 1, !dbg !20
  %37 = fsub float 0.000000e+00, %36, !dbg !20
  %38 = fmul float %35, 0x3FF7154760000000, !dbg !24
  %39 = fmul float %37, 0x3FF7154760000000, !dbg !24
  %40 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !16
  %41 = insertelement <2 x i32> %40, i32 %extelt.offset2, i64 1, !dbg !16
  %42 = trunc <2 x i32> %41 to <2 x i16>, !dbg !16
  %43 = bitcast <2 x i16> %42 to <2 x half>, !dbg !16
  %44 = fpext <2 x half> %43 to <2 x float>, !dbg !19
  %45 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %46 = insertelement <2 x i32> %45, i32 %extelt.offset6, i64 1, !dbg !18
  %47 = trunc <2 x i32> %46 to <2 x i16>, !dbg !18
  %48 = bitcast <2 x i16> %47 to <2 x half>, !dbg !18
  %49 = extractelement <2 x float> %44, i64 0, !dbg !20
  %50 = fsub float 0.000000e+00, %49, !dbg !20
  %51 = extractelement <2 x float> %44, i64 1, !dbg !20
  %52 = fsub float 0.000000e+00, %51, !dbg !20
  %53 = fmul float %50, 0x3FF7154760000000, !dbg !24
  %54 = fmul float %52, 0x3FF7154760000000, !dbg !24
  %55 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %56 = insertelement <2 x i32> %55, i32 %extelt.offset1, i64 1, !dbg !16
  %57 = trunc <2 x i32> %56 to <2 x i16>, !dbg !16
  %58 = bitcast <2 x i16> %57 to <2 x half>, !dbg !16
  %59 = fpext <2 x half> %58 to <2 x float>, !dbg !19
  %60 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %61 = insertelement <2 x i32> %60, i32 %extelt.offset5, i64 1, !dbg !18
  %62 = trunc <2 x i32> %61 to <2 x i16>, !dbg !18
  %63 = bitcast <2 x i16> %62 to <2 x half>, !dbg !18
  %64 = extractelement <2 x float> %59, i64 0, !dbg !20
  %65 = fsub float 0.000000e+00, %64, !dbg !20
  %66 = extractelement <2 x float> %59, i64 1, !dbg !20
  %67 = fsub float 0.000000e+00, %66, !dbg !20
  %68 = fmul float %65, 0x3FF7154760000000, !dbg !24
  %69 = fmul float %67, 0x3FF7154760000000, !dbg !24
  %70 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !16
  %71 = insertelement <2 x i32> %70, i32 %extelt.offset, i64 1, !dbg !16
  %72 = trunc <2 x i32> %71 to <2 x i16>, !dbg !16
  %73 = bitcast <2 x i16> %72 to <2 x half>, !dbg !16
  %74 = fpext <2 x half> %73 to <2 x float>, !dbg !19
  %75 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %76 = insertelement <2 x i32> %75, i32 %extelt.offset4, i64 1, !dbg !18
  %77 = trunc <2 x i32> %76 to <2 x i16>, !dbg !18
  %78 = bitcast <2 x i16> %77 to <2 x half>, !dbg !18
  %79 = extractelement <2 x float> %74, i64 0, !dbg !20
  %80 = fsub float 0.000000e+00, %79, !dbg !20
  %81 = extractelement <2 x float> %74, i64 1, !dbg !20
  %82 = fsub float 0.000000e+00, %81, !dbg !20
  %83 = fmul float %80, 0x3FF7154760000000, !dbg !24
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !24
  %85 = fmul float %82, 0x3FF7154760000000, !dbg !24
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !24
  %87 = fadd float %84, 1.000000e+00, !dbg !25
  %88 = fadd float %86, 1.000000e+00, !dbg !25
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #1, !dbg !24
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #1, !dbg !24
  %91 = fadd float %89, 1.000000e+00, !dbg !25
  %92 = fadd float %90, 1.000000e+00, !dbg !25
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #1, !dbg !24
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #1, !dbg !24
  %95 = fadd float %93, 1.000000e+00, !dbg !25
  %96 = fadd float %94, 1.000000e+00, !dbg !25
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %38) #1, !dbg !24
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #1, !dbg !24
  %99 = fadd float %97, 1.000000e+00, !dbg !25
  %100 = fadd float %98, 1.000000e+00, !dbg !25
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #1, !dbg !26
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %88) #1, !dbg !26
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %91) #1, !dbg !26
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !26
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !26
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #1, !dbg !26
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %99) #1, !dbg !26
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %100) #1, !dbg !26
  %109 = insertelement <2 x float> poison, float %101, i64 0, !dbg !27
  %110 = insertelement <2 x float> %109, float %102, i64 1, !dbg !27
  %111 = fmul <2 x float> %110, %74, !dbg !27
  %112 = insertelement <2 x float> poison, float %103, i64 0, !dbg !27
  %113 = insertelement <2 x float> %112, float %104, i64 1, !dbg !27
  %114 = fmul <2 x float> %113, %59, !dbg !27
  %115 = insertelement <2 x float> poison, float %105, i64 0, !dbg !27
  %116 = insertelement <2 x float> %115, float %106, i64 1, !dbg !27
  %117 = fmul <2 x float> %116, %44, !dbg !27
  %118 = insertelement <2 x float> poison, float %107, i64 0, !dbg !27
  %119 = insertelement <2 x float> %118, float %108, i64 1, !dbg !27
  %120 = fmul <2 x float> %119, %29, !dbg !27
  %121 = fptrunc <2 x float> %111 to <2 x half>, !dbg !28
  %122 = fptrunc <2 x float> %114 to <2 x half>, !dbg !28
  %123 = fptrunc <2 x float> %117 to <2 x half>, !dbg !28
  %124 = fptrunc <2 x float> %120 to <2 x half>, !dbg !28
  %125 = fmul <2 x half> %78, %121, !dbg !29
  %126 = fmul <2 x half> %63, %122, !dbg !29
  %127 = fmul <2 x half> %48, %123, !dbg !29
  %128 = fmul <2 x half> %33, %124, !dbg !29
  %129 = getelementptr half, ptr addrspace(1) %2, i64 %12, !dbg !30
  %130 = bitcast <2 x half> %125 to i32, !dbg !31
  %131 = bitcast <2 x half> %126 to i32, !dbg !31
  %132 = bitcast <2 x half> %127 to i32, !dbg !31
  %133 = bitcast <2 x half> %128 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %131, i32 %132, i32 %133, ptr addrspace(1) %129, i1 %11) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "swiglu.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/unsloth/kernels")
!4 = !{ptr @_fg_kernel, !"kernel", i32 1}
!5 = !{ptr @_fg_kernel, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_fg_kernel", linkageName: "_fg_kernel", scope: !3, file: !3, line: 22, type: !8, scopeLine: 22, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 30, scope: !7)
!11 = !DILocation(line: 24, column: 24, scope: !7)
!12 = !DILocation(line: 24, column: 50, scope: !7)
!13 = !DILocation(line: 24, column: 37, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 24, scope: !7)
!16 = !DILocation(line: 27, column: 20, scope: !7)
!17 = !DILocation(line: 28, column: 24, scope: !7)
!18 = !DILocation(line: 28, column: 20, scope: !7)
!19 = !DILocation(line: 27, column: 60, scope: !7)
!20 = !DILocation(line: 51, column: 30, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/triton/language")
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 51, column: 29, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 51, column: 20, scope: !21, inlinedAt: !23)
!26 = !DILocation(line: 51, column: 16, scope: !21, inlinedAt: !23)
!27 = !DILocation(line: 31, column: 20, scope: !7)
!28 = !DILocation(line: 32, column: 21, scope: !7)
!29 = !DILocation(line: 34, column: 20, scope: !7)
!30 = !DILocation(line: 37, column: 17, scope: !7)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 37, column: 4, scope: !7)
