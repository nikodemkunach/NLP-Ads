; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @_DWf_DW_dfg_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, %3, !dbg !14
  %12 = sext i32 %10 to i64, !dbg !15
  %13 = getelementptr half, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !16
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !16
  %extelt.offset = lshr i32 %15, 16, !dbg !16
  %extelt.offset1 = lshr i32 %16, 16, !dbg !16
  %extelt.offset2 = lshr i32 %17, 16, !dbg !16
  %extelt.offset3 = lshr i32 %18, 16, !dbg !16
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %12, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %extelt.offset4 = lshr i32 %21, 16, !dbg !18
  %extelt.offset5 = lshr i32 %22, 16, !dbg !18
  %extelt.offset6 = lshr i32 %23, 16, !dbg !18
  %extelt.offset7 = lshr i32 %24, 16, !dbg !18
  %25 = getelementptr half, ptr addrspace(1) %2, i64 %12, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %extelt.offset8 = lshr i32 %27, 16, !dbg !20
  %extelt.offset9 = lshr i32 %28, 16, !dbg !20
  %extelt.offset10 = lshr i32 %29, 16, !dbg !20
  %extelt.offset11 = lshr i32 %30, 16, !dbg !20
  %31 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %32 = insertelement <2 x i32> %31, i32 %extelt.offset7, i64 1, !dbg !18
  %33 = trunc <2 x i32> %32 to <2 x i16>, !dbg !18
  %34 = bitcast <2 x i16> %33 to <2 x half>, !dbg !18
  %35 = fpext <2 x half> %34 to <2 x float>, !dbg !21
  %36 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %37 = insertelement <2 x i32> %36, i32 %extelt.offset11, i64 1, !dbg !20
  %38 = trunc <2 x i32> %37 to <2 x i16>, !dbg !20
  %39 = bitcast <2 x i16> %38 to <2 x half>, !dbg !20
  %40 = extractelement <2 x float> %35, i64 0, !dbg !22
  %41 = fsub float 0.000000e+00, %40, !dbg !22
  %42 = extractelement <2 x float> %35, i64 1, !dbg !22
  %43 = fsub float 0.000000e+00, %42, !dbg !22
  %44 = fmul float %41, 0x3FF7154760000000, !dbg !26
  %45 = fmul float %43, 0x3FF7154760000000, !dbg !26
  %46 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %47 = insertelement <2 x i32> %46, i32 %extelt.offset6, i64 1, !dbg !18
  %48 = trunc <2 x i32> %47 to <2 x i16>, !dbg !18
  %49 = bitcast <2 x i16> %48 to <2 x half>, !dbg !18
  %50 = fpext <2 x half> %49 to <2 x float>, !dbg !21
  %51 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %52 = insertelement <2 x i32> %51, i32 %extelt.offset10, i64 1, !dbg !20
  %53 = trunc <2 x i32> %52 to <2 x i16>, !dbg !20
  %54 = bitcast <2 x i16> %53 to <2 x half>, !dbg !20
  %55 = extractelement <2 x float> %50, i64 0, !dbg !22
  %56 = fsub float 0.000000e+00, %55, !dbg !22
  %57 = extractelement <2 x float> %50, i64 1, !dbg !22
  %58 = fsub float 0.000000e+00, %57, !dbg !22
  %59 = fmul float %56, 0x3FF7154760000000, !dbg !26
  %60 = fmul float %58, 0x3FF7154760000000, !dbg !26
  %61 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %62 = insertelement <2 x i32> %61, i32 %extelt.offset5, i64 1, !dbg !18
  %63 = trunc <2 x i32> %62 to <2 x i16>, !dbg !18
  %64 = bitcast <2 x i16> %63 to <2 x half>, !dbg !18
  %65 = fpext <2 x half> %64 to <2 x float>, !dbg !21
  %66 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %67 = insertelement <2 x i32> %66, i32 %extelt.offset9, i64 1, !dbg !20
  %68 = trunc <2 x i32> %67 to <2 x i16>, !dbg !20
  %69 = bitcast <2 x i16> %68 to <2 x half>, !dbg !20
  %70 = extractelement <2 x float> %65, i64 0, !dbg !22
  %71 = fsub float 0.000000e+00, %70, !dbg !22
  %72 = extractelement <2 x float> %65, i64 1, !dbg !22
  %73 = fsub float 0.000000e+00, %72, !dbg !22
  %74 = fmul float %71, 0x3FF7154760000000, !dbg !26
  %75 = fmul float %73, 0x3FF7154760000000, !dbg !26
  %76 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %77 = insertelement <2 x i32> %76, i32 %extelt.offset4, i64 1, !dbg !18
  %78 = trunc <2 x i32> %77 to <2 x i16>, !dbg !18
  %79 = bitcast <2 x i16> %78 to <2 x half>, !dbg !18
  %80 = fpext <2 x half> %79 to <2 x float>, !dbg !21
  %81 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %82 = insertelement <2 x i32> %81, i32 %extelt.offset8, i64 1, !dbg !20
  %83 = trunc <2 x i32> %82 to <2 x i16>, !dbg !20
  %84 = bitcast <2 x i16> %83 to <2 x half>, !dbg !20
  %85 = extractelement <2 x float> %80, i64 0, !dbg !22
  %86 = fsub float 0.000000e+00, %85, !dbg !22
  %87 = extractelement <2 x float> %80, i64 1, !dbg !22
  %88 = fsub float 0.000000e+00, %87, !dbg !22
  %89 = fmul float %86, 0x3FF7154760000000, !dbg !26
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !26
  %91 = fmul float %88, 0x3FF7154760000000, !dbg !26
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !26
  %93 = fadd float %90, 1.000000e+00, !dbg !27
  %94 = fadd float %92, 1.000000e+00, !dbg !27
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #1, !dbg !26
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !26
  %97 = fadd float %95, 1.000000e+00, !dbg !27
  %98 = fadd float %96, 1.000000e+00, !dbg !27
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !26
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #1, !dbg !26
  %101 = fadd float %99, 1.000000e+00, !dbg !27
  %102 = fadd float %100, 1.000000e+00, !dbg !27
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %44) #1, !dbg !26
  %104 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #1, !dbg !26
  %105 = fadd float %103, 1.000000e+00, !dbg !27
  %106 = fadd float %104, 1.000000e+00, !dbg !27
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !28
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !28
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !28
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %98) #1, !dbg !28
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %101) #1, !dbg !28
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %102) #1, !dbg !28
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %105) #1, !dbg !28
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #1, !dbg !28
  %115 = insertelement <2 x float> poison, float %107, i64 0, !dbg !29
  %116 = insertelement <2 x float> %115, float %108, i64 1, !dbg !29
  %117 = fmul <2 x float> %116, %80, !dbg !29
  %118 = insertelement <2 x float> poison, float %109, i64 0, !dbg !29
  %119 = insertelement <2 x float> %118, float %110, i64 1, !dbg !29
  %120 = fmul <2 x float> %119, %65, !dbg !29
  %121 = insertelement <2 x float> poison, float %111, i64 0, !dbg !29
  %122 = insertelement <2 x float> %121, float %112, i64 1, !dbg !29
  %123 = fmul <2 x float> %122, %50, !dbg !29
  %124 = insertelement <2 x float> poison, float %113, i64 0, !dbg !29
  %125 = insertelement <2 x float> %124, float %114, i64 1, !dbg !29
  %126 = fmul <2 x float> %125, %35, !dbg !29
  %127 = fptrunc <2 x float> %117 to <2 x half>, !dbg !30
  %128 = fptrunc <2 x float> %120 to <2 x half>, !dbg !30
  %129 = fptrunc <2 x float> %123 to <2 x half>, !dbg !30
  %130 = fptrunc <2 x float> %126 to <2 x half>, !dbg !30
  %131 = fmul <2 x half> %84, %127, !dbg !31
  %132 = fmul <2 x half> %69, %128, !dbg !31
  %133 = fmul <2 x half> %54, %129, !dbg !31
  %134 = fmul <2 x half> %39, %130, !dbg !31
  %135 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !16
  %136 = insertelement <2 x i32> %135, i32 %extelt.offset, i64 1, !dbg !16
  %137 = trunc <2 x i32> %136 to <2 x i16>, !dbg !16
  %138 = bitcast <2 x i16> %137 to <2 x half>, !dbg !16
  %139 = fmul <2 x half> %138, %127, !dbg !32
  %140 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %141 = insertelement <2 x i32> %140, i32 %extelt.offset1, i64 1, !dbg !16
  %142 = trunc <2 x i32> %141 to <2 x i16>, !dbg !16
  %143 = bitcast <2 x i16> %142 to <2 x half>, !dbg !16
  %144 = fmul <2 x half> %143, %128, !dbg !32
  %145 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !16
  %146 = insertelement <2 x i32> %145, i32 %extelt.offset2, i64 1, !dbg !16
  %147 = trunc <2 x i32> %146 to <2 x i16>, !dbg !16
  %148 = bitcast <2 x i16> %147 to <2 x half>, !dbg !16
  %149 = fmul <2 x half> %148, %129, !dbg !32
  %150 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %151 = insertelement <2 x i32> %150, i32 %extelt.offset3, i64 1, !dbg !16
  %152 = trunc <2 x i32> %151 to <2 x i16>, !dbg !16
  %153 = bitcast <2 x i16> %152 to <2 x half>, !dbg !16
  %154 = fmul <2 x half> %153, %130, !dbg !32
  %155 = fmul <2 x half> %138, %84, !dbg !33
  %156 = fpext <2 x half> %155 to <2 x float>, !dbg !34
  %157 = fmul <2 x float> %116, %156, !dbg !35
  %158 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %116, !dbg !36
  %159 = fmul <2 x float> %158, %80, !dbg !37
  %160 = fadd <2 x float> %159, <float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %161 = fmul <2 x float> %157, %160, !dbg !39
  %162 = fptrunc <2 x float> %161 to <2 x half>, !dbg !40
  %163 = fmul <2 x half> %143, %69, !dbg !33
  %164 = fpext <2 x half> %163 to <2 x float>, !dbg !34
  %165 = fmul <2 x float> %119, %164, !dbg !35
  %166 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %119, !dbg !36
  %167 = fmul <2 x float> %166, %65, !dbg !37
  %168 = fadd <2 x float> %167, <float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %169 = fmul <2 x float> %165, %168, !dbg !39
  %170 = fptrunc <2 x float> %169 to <2 x half>, !dbg !40
  %171 = fmul <2 x half> %148, %54, !dbg !33
  %172 = fpext <2 x half> %171 to <2 x float>, !dbg !34
  %173 = fmul <2 x float> %122, %172, !dbg !35
  %174 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %122, !dbg !36
  %175 = fmul <2 x float> %174, %50, !dbg !37
  %176 = fadd <2 x float> %175, <float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %177 = fmul <2 x float> %173, %176, !dbg !39
  %178 = fptrunc <2 x float> %177 to <2 x half>, !dbg !40
  %179 = fmul <2 x half> %153, %39, !dbg !33
  %180 = fpext <2 x half> %179 to <2 x float>, !dbg !34
  %181 = fmul <2 x float> %125, %180, !dbg !35
  %182 = fsub <2 x float> <float 1.000000e+00, float 1.000000e+00>, %125, !dbg !36
  %183 = fmul <2 x float> %182, %35, !dbg !37
  %184 = fadd <2 x float> %183, <float 1.000000e+00, float 1.000000e+00>, !dbg !38
  %185 = fmul <2 x float> %181, %184, !dbg !39
  %186 = fptrunc <2 x float> %185 to <2 x half>, !dbg !40
  %187 = bitcast <2 x half> %131 to i32, !dbg !41
  %188 = bitcast <2 x half> %132 to i32, !dbg !41
  %189 = bitcast <2 x half> %133 to i32, !dbg !41
  %190 = bitcast <2 x half> %134 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %188, i32 %189, i32 %190, ptr addrspace(1) %13, i1 %11) #1, !dbg !41
  %191 = bitcast <2 x half> %139 to i32, !dbg !42
  %192 = bitcast <2 x half> %144 to i32, !dbg !42
  %193 = bitcast <2 x half> %149 to i32, !dbg !42
  %194 = bitcast <2 x half> %154 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %192, i32 %193, i32 %194, ptr addrspace(1) %19, i1 %11) #1, !dbg !42
  %195 = bitcast <2 x half> %162 to i32, !dbg !43
  %196 = bitcast <2 x half> %170 to i32, !dbg !43
  %197 = bitcast <2 x half> %178 to i32, !dbg !43
  %198 = bitcast <2 x half> %186 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %195, i32 %196, i32 %197, i32 %198, ptr addrspace(1) %25, i1 %11) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "swiglu.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/unsloth/kernels")
!4 = !{ptr @_DWf_DW_dfg_kernel, !"kernel", i32 1}
!5 = !{ptr @_DWf_DW_dfg_kernel, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_DWf_DW_dfg_kernel", linkageName: "_DWf_DW_dfg_kernel", scope: !3, file: !3, line: 52, type: !8, scopeLine: 52, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 62, column: 30, scope: !7)
!11 = !DILocation(line: 63, column: 24, scope: !7)
!12 = !DILocation(line: 63, column: 50, scope: !7)
!13 = !DILocation(line: 63, column: 37, scope: !7)
!14 = !DILocation(line: 64, column: 21, scope: !7)
!15 = !DILocation(line: 66, column: 26, scope: !7)
!16 = !DILocation(line: 66, column: 21, scope: !7)
!17 = !DILocation(line: 67, column: 26, scope: !7)
!18 = !DILocation(line: 67, column: 21, scope: !7)
!19 = !DILocation(line: 68, column: 26, scope: !7)
!20 = !DILocation(line: 68, column: 21, scope: !7)
!21 = !DILocation(line: 67, column: 62, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/triton/language")
!25 = !DILocation(line: 72, column: 24, scope: !7)
!26 = !DILocation(line: 51, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 51, column: 20, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 51, column: 16, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 74, column: 21, scope: !7)
!30 = !DILocation(line: 75, column: 21, scope: !7)
!31 = !DILocation(line: 77, column: 22, scope: !7)
!32 = !DILocation(line: 79, column: 22, scope: !7)
!33 = !DILocation(line: 81, column: 22, scope: !7)
!34 = !DILocation(line: 83, column: 23, scope: !7)
!35 = !DILocation(line: 83, column: 37, scope: !7)
!36 = !DILocation(line: 83, column: 68, scope: !7)
!37 = !DILocation(line: 83, column: 62, scope: !7)
!38 = !DILocation(line: 83, column: 53, scope: !7)
!39 = !DILocation(line: 83, column: 47, scope: !7)
!40 = !DILocation(line: 84, column: 23, scope: !7)
!41 = !DILocation(line: 87, column: 27, scope: !7)
!42 = !DILocation(line: 88, column: 27, scope: !7)
!43 = !DILocation(line: 89, column: 27, scope: !7)
!44 = !DILocation(line: 89, column: 4, scope: !7)
