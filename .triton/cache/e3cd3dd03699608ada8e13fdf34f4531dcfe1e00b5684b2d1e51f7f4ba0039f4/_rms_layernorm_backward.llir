; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @_rms_layernorm_backward(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) nocapture readnone %2, i32 %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, float %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 3, !dbg !11
  %16 = and i32 %15, 2040, !dbg !11
  %17 = or disjoint i32 %16, 2048, !dbg !11
  %18 = icmp slt i32 %16, %8, !dbg !12
  %19 = icmp slt i32 %17, %8, !dbg !12
  %20 = mul i32 %11, %1, !dbg !13
  %21 = sext i32 %20 to i64, !dbg !14
  %22 = getelementptr half, ptr addrspace(1) %0, i64 %21, !dbg !14
  %23 = mul i32 %11, %5, !dbg !15
  %24 = sext i32 %23 to i64, !dbg !16
  %25 = getelementptr half, ptr addrspace(1) %4, i64 %24, !dbg !16
  %26 = sext i32 %11 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !17
  %28 = zext nneg i32 %16 to i64, !dbg !18
  %29 = getelementptr half, ptr addrspace(1) %22, i64 %28, !dbg !18
  %30 = zext nneg i32 %17 to i64, !dbg !18
  %31 = getelementptr half, ptr addrspace(1) %22, i64 %30, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %extelt.offset = lshr i32 %33, 16, !dbg !19
  %extelt.offset1 = lshr i32 %34, 16, !dbg !19
  %extelt.offset2 = lshr i32 %35, 16, !dbg !19
  %extelt.offset3 = lshr i32 %36, 16, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !19
  %extelt.offset4 = lshr i32 %38, 16, !dbg !19
  %extelt.offset5 = lshr i32 %39, 16, !dbg !19
  %extelt.offset6 = lshr i32 %40, 16, !dbg !19
  %extelt.offset7 = lshr i32 %41, 16, !dbg !19
  %42 = getelementptr half, ptr addrspace(1) %25, i64 %28, !dbg !20
  %43 = getelementptr half, ptr addrspace(1) %25, i64 %30, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !21
  %extelt.offset8 = lshr i32 %45, 16, !dbg !21
  %extelt.offset9 = lshr i32 %46, 16, !dbg !21
  %extelt.offset10 = lshr i32 %47, 16, !dbg !21
  %extelt.offset11 = lshr i32 %48, 16, !dbg !21
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !21
  %extelt.offset12 = lshr i32 %50, 16, !dbg !21
  %extelt.offset13 = lshr i32 %51, 16, !dbg !21
  %extelt.offset14 = lshr i32 %52, 16, !dbg !21
  %extelt.offset15 = lshr i32 %53, 16, !dbg !21
  %54 = getelementptr half, ptr addrspace(1) %6, i64 %28, !dbg !22
  %55 = getelementptr half, ptr addrspace(1) %6, i64 %30, !dbg !22
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %extelt.offset16 = lshr i32 %57, 16, !dbg !23
  %extelt.offset17 = lshr i32 %58, 16, !dbg !23
  %extelt.offset18 = lshr i32 %59, 16, !dbg !23
  %extelt.offset19 = lshr i32 %60, 16, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %extelt.offset20 = lshr i32 %62, 16, !dbg !23
  %extelt.offset21 = lshr i32 %63, 16, !dbg !23
  %extelt.offset22 = lshr i32 %64, 16, !dbg !23
  %extelt.offset23 = lshr i32 %65, 16, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = insertelement <2 x i32> poison, i32 %extelt.offset4, i64 0, !dbg !19
  %69 = insertelement <2 x i32> %68, i32 %38, i64 1, !dbg !19
  %70 = trunc <2 x i32> %69 to <2 x i16>, !dbg !19
  %71 = bitcast <2 x i16> %70 to <2 x half>, !dbg !19
  %72 = fpext <2 x half> %71 to <2 x float>, !dbg !25
  %73 = insertelement <2 x i32> poison, i32 %extelt.offset12, i64 0, !dbg !21
  %74 = insertelement <2 x i32> %73, i32 %50, i64 1, !dbg !21
  %75 = trunc <2 x i32> %74 to <2 x i16>, !dbg !21
  %76 = bitcast <2 x i16> %75 to <2 x half>, !dbg !21
  %77 = fpext <2 x half> %76 to <2 x float>, !dbg !26
  %78 = insertelement <2 x i32> poison, i32 %extelt.offset20, i64 0, !dbg !23
  %79 = insertelement <2 x i32> %78, i32 %62, i64 1, !dbg !23
  %80 = trunc <2 x i32> %79 to <2 x i16>, !dbg !23
  %81 = bitcast <2 x i16> %80 to <2 x half>, !dbg !23
  %82 = fpext <2 x half> %81 to <2 x float>, !dbg !27
  %83 = insertelement <2 x float> poison, float %67, i64 0, !dbg !28
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !28
  %85 = fmul <2 x float> %84, %77, !dbg !28
  %86 = fmul <2 x float> %72, %82, !dbg !29
  %87 = fmul <2 x float> %85, %86, !dbg !30
  %88 = insertelement <2 x i32> poison, i32 %extelt.offset5, i64 0, !dbg !19
  %89 = insertelement <2 x i32> %88, i32 %39, i64 1, !dbg !19
  %90 = trunc <2 x i32> %89 to <2 x i16>, !dbg !19
  %91 = bitcast <2 x i16> %90 to <2 x half>, !dbg !19
  %92 = fpext <2 x half> %91 to <2 x float>, !dbg !25
  %93 = insertelement <2 x i32> poison, i32 %extelt.offset13, i64 0, !dbg !21
  %94 = insertelement <2 x i32> %93, i32 %51, i64 1, !dbg !21
  %95 = trunc <2 x i32> %94 to <2 x i16>, !dbg !21
  %96 = bitcast <2 x i16> %95 to <2 x half>, !dbg !21
  %97 = fpext <2 x half> %96 to <2 x float>, !dbg !26
  %98 = insertelement <2 x i32> poison, i32 %extelt.offset21, i64 0, !dbg !23
  %99 = insertelement <2 x i32> %98, i32 %63, i64 1, !dbg !23
  %100 = trunc <2 x i32> %99 to <2 x i16>, !dbg !23
  %101 = bitcast <2 x i16> %100 to <2 x half>, !dbg !23
  %102 = fpext <2 x half> %101 to <2 x float>, !dbg !27
  %103 = fmul <2 x float> %84, %97, !dbg !28
  %104 = fmul <2 x float> %92, %102, !dbg !29
  %105 = fmul <2 x float> %103, %104, !dbg !30
  %106 = insertelement <2 x i32> poison, i32 %extelt.offset6, i64 0, !dbg !19
  %107 = insertelement <2 x i32> %106, i32 %40, i64 1, !dbg !19
  %108 = trunc <2 x i32> %107 to <2 x i16>, !dbg !19
  %109 = bitcast <2 x i16> %108 to <2 x half>, !dbg !19
  %110 = fpext <2 x half> %109 to <2 x float>, !dbg !25
  %111 = insertelement <2 x i32> poison, i32 %extelt.offset14, i64 0, !dbg !21
  %112 = insertelement <2 x i32> %111, i32 %52, i64 1, !dbg !21
  %113 = trunc <2 x i32> %112 to <2 x i16>, !dbg !21
  %114 = bitcast <2 x i16> %113 to <2 x half>, !dbg !21
  %115 = fpext <2 x half> %114 to <2 x float>, !dbg !26
  %116 = insertelement <2 x i32> poison, i32 %extelt.offset22, i64 0, !dbg !23
  %117 = insertelement <2 x i32> %116, i32 %64, i64 1, !dbg !23
  %118 = trunc <2 x i32> %117 to <2 x i16>, !dbg !23
  %119 = bitcast <2 x i16> %118 to <2 x half>, !dbg !23
  %120 = fpext <2 x half> %119 to <2 x float>, !dbg !27
  %121 = fmul <2 x float> %84, %115, !dbg !28
  %122 = fmul <2 x float> %110, %120, !dbg !29
  %123 = fmul <2 x float> %121, %122, !dbg !30
  %124 = insertelement <2 x i32> poison, i32 %extelt.offset7, i64 0, !dbg !19
  %125 = insertelement <2 x i32> %124, i32 %41, i64 1, !dbg !19
  %126 = trunc <2 x i32> %125 to <2 x i16>, !dbg !19
  %127 = bitcast <2 x i16> %126 to <2 x half>, !dbg !19
  %128 = fpext <2 x half> %127 to <2 x float>, !dbg !25
  %129 = insertelement <2 x i32> poison, i32 %extelt.offset15, i64 0, !dbg !21
  %130 = insertelement <2 x i32> %129, i32 %53, i64 1, !dbg !21
  %131 = trunc <2 x i32> %130 to <2 x i16>, !dbg !21
  %132 = bitcast <2 x i16> %131 to <2 x half>, !dbg !21
  %133 = fpext <2 x half> %132 to <2 x float>, !dbg !26
  %134 = insertelement <2 x i32> poison, i32 %extelt.offset23, i64 0, !dbg !23
  %135 = insertelement <2 x i32> %134, i32 %65, i64 1, !dbg !23
  %136 = trunc <2 x i32> %135 to <2 x i16>, !dbg !23
  %137 = bitcast <2 x i16> %136 to <2 x half>, !dbg !23
  %138 = fpext <2 x half> %137 to <2 x float>, !dbg !27
  %139 = fmul <2 x float> %84, %133, !dbg !28
  %140 = fmul <2 x float> %128, %138, !dbg !29
  %141 = fmul <2 x float> %139, %140, !dbg !30
  %142 = icmp eq i32 %13, 0, !dbg !31
  %143 = and i32 %14, 7, !dbg !31
  %144 = zext nneg i32 %143 to i64, !dbg !31
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !31
  %146 = icmp slt i32 %12, 8, !dbg !31
  %147 = sext i32 %12 to i64, !dbg !31
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147, !dbg !31
  %149 = and i32 %12, 7, !dbg !31
  %150 = icmp eq i32 %149, 0, !dbg !31
  %151 = and i1 %146, %150, !dbg !31
  %152 = sitofp i32 %8 to float, !dbg !35
  %153 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !19
  %154 = insertelement <2 x i32> %153, i32 %extelt.offset3, i64 1, !dbg !19
  %155 = trunc <2 x i32> %154 to <2 x i16>, !dbg !19
  %156 = bitcast <2 x i16> %155 to <2 x half>, !dbg !19
  %157 = fpext <2 x half> %156 to <2 x float>, !dbg !25
  %158 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !21
  %159 = insertelement <2 x i32> %158, i32 %extelt.offset11, i64 1, !dbg !21
  %160 = trunc <2 x i32> %159 to <2 x i16>, !dbg !21
  %161 = bitcast <2 x i16> %160 to <2 x half>, !dbg !21
  %162 = fpext <2 x half> %161 to <2 x float>, !dbg !26
  %163 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !23
  %164 = insertelement <2 x i32> %163, i32 %extelt.offset19, i64 1, !dbg !23
  %165 = trunc <2 x i32> %164 to <2 x i16>, !dbg !23
  %166 = bitcast <2 x i16> %165 to <2 x half>, !dbg !23
  %167 = fpext <2 x half> %166 to <2 x float>, !dbg !27
  %168 = fmul <2 x float> %84, %162, !dbg !28
  %169 = fmul <2 x float> %157, %167, !dbg !29
  %170 = fmul <2 x float> %168, %169, !dbg !30
  %171 = fmul <2 x float> %168, %169, !dbg !30
  %172 = insertelement <2 x float> poison, float %152, i64 0, !dbg !36
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !36
  %174 = fmul <2 x float> %169, %173, !dbg !36
  %175 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %176 = insertelement <2 x i32> %175, i32 %extelt.offset2, i64 1, !dbg !19
  %177 = trunc <2 x i32> %176 to <2 x i16>, !dbg !19
  %178 = bitcast <2 x i16> %177 to <2 x half>, !dbg !19
  %179 = fpext <2 x half> %178 to <2 x float>, !dbg !25
  %180 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !21
  %181 = insertelement <2 x i32> %180, i32 %extelt.offset10, i64 1, !dbg !21
  %182 = trunc <2 x i32> %181 to <2 x i16>, !dbg !21
  %183 = bitcast <2 x i16> %182 to <2 x half>, !dbg !21
  %184 = fpext <2 x half> %183 to <2 x float>, !dbg !26
  %185 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !23
  %186 = insertelement <2 x i32> %185, i32 %extelt.offset18, i64 1, !dbg !23
  %187 = trunc <2 x i32> %186 to <2 x i16>, !dbg !23
  %188 = bitcast <2 x i16> %187 to <2 x half>, !dbg !23
  %189 = fpext <2 x half> %188 to <2 x float>, !dbg !27
  %190 = fmul <2 x float> %84, %184, !dbg !28
  %191 = fmul <2 x float> %179, %189, !dbg !29
  %192 = fmul <2 x float> %190, %191, !dbg !30
  %193 = fmul <2 x float> %190, %191, !dbg !30
  %194 = fmul <2 x float> %191, %173, !dbg !36
  %195 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %196 = insertelement <2 x i32> %195, i32 %extelt.offset1, i64 1, !dbg !19
  %197 = trunc <2 x i32> %196 to <2 x i16>, !dbg !19
  %198 = bitcast <2 x i16> %197 to <2 x half>, !dbg !19
  %199 = fpext <2 x half> %198 to <2 x float>, !dbg !25
  %200 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !21
  %201 = insertelement <2 x i32> %200, i32 %extelt.offset9, i64 1, !dbg !21
  %202 = trunc <2 x i32> %201 to <2 x i16>, !dbg !21
  %203 = bitcast <2 x i16> %202 to <2 x half>, !dbg !21
  %204 = fpext <2 x half> %203 to <2 x float>, !dbg !26
  %205 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !23
  %206 = insertelement <2 x i32> %205, i32 %extelt.offset17, i64 1, !dbg !23
  %207 = trunc <2 x i32> %206 to <2 x i16>, !dbg !23
  %208 = bitcast <2 x i16> %207 to <2 x half>, !dbg !23
  %209 = fpext <2 x half> %208 to <2 x float>, !dbg !27
  %210 = fmul <2 x float> %84, %204, !dbg !28
  %211 = fmul <2 x float> %199, %209, !dbg !29
  %212 = fmul <2 x float> %210, %211, !dbg !30
  %213 = fmul <2 x float> %210, %211, !dbg !30
  %214 = fmul <2 x float> %211, %173, !dbg !36
  %215 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !19
  %216 = insertelement <2 x i32> %215, i32 %extelt.offset, i64 1, !dbg !19
  %217 = trunc <2 x i32> %216 to <2 x i16>, !dbg !19
  %218 = bitcast <2 x i16> %217 to <2 x half>, !dbg !19
  %219 = fpext <2 x half> %218 to <2 x float>, !dbg !25
  %220 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !21
  %221 = insertelement <2 x i32> %220, i32 %extelt.offset8, i64 1, !dbg !21
  %222 = trunc <2 x i32> %221 to <2 x i16>, !dbg !21
  %223 = bitcast <2 x i16> %222 to <2 x half>, !dbg !21
  %224 = fpext <2 x half> %223 to <2 x float>, !dbg !26
  %225 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !23
  %226 = insertelement <2 x i32> %225, i32 %extelt.offset16, i64 1, !dbg !23
  %227 = trunc <2 x i32> %226 to <2 x i16>, !dbg !23
  %228 = bitcast <2 x i16> %227 to <2 x half>, !dbg !23
  %229 = fpext <2 x half> %228 to <2 x float>, !dbg !27
  %230 = fmul <2 x float> %84, %224, !dbg !28
  %231 = fmul <2 x float> %219, %229, !dbg !29
  %232 = fmul <2 x float> %230, %231, !dbg !30
  %233 = fmul <2 x float> %230, %231, !dbg !30
  %shift = shufflevector <2 x float> %233, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %234 = fadd <2 x float> %232, %shift, !dbg !37
  %235 = fmul <2 x float> %231, %173, !dbg !36
  %236 = fadd <2 x float> %212, %234, !dbg !37
  %shift24 = shufflevector <2 x float> %213, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %237 = fadd <2 x float> %shift24, %236, !dbg !37
  %238 = fadd <2 x float> %192, %237, !dbg !37
  %shift25 = shufflevector <2 x float> %193, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %239 = fadd <2 x float> %shift25, %238, !dbg !37
  %240 = fadd <2 x float> %170, %239, !dbg !37
  %shift26 = shufflevector <2 x float> %171, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %241 = fadd <2 x float> %shift26, %240, !dbg !37
  %shift27 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %242 = fadd <2 x float> %shift27, %241, !dbg !37
  %243 = fadd <2 x float> %87, %242, !dbg !37
  %shift28 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %244 = fadd <2 x float> %shift28, %243, !dbg !37
  %245 = fadd <2 x float> %105, %244, !dbg !37
  %shift29 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %246 = fadd <2 x float> %shift29, %245, !dbg !37
  %247 = fadd <2 x float> %123, %246, !dbg !37
  %shift30 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %248 = fadd <2 x float> %shift30, %247, !dbg !37
  %249 = fadd <2 x float> %141, %248, !dbg !37
  %250 = extractelement <2 x float> %249, i64 0, !dbg !37
  %251 = bitcast float %250 to i32, !dbg !31
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 16, i32 31), !dbg !31
  %253 = bitcast i32 %252 to float, !dbg !31
  %254 = fadd float %250, %253, !dbg !37
  %255 = bitcast float %254 to i32, !dbg !31
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 8, i32 31), !dbg !31
  %257 = bitcast i32 %256 to float, !dbg !31
  %258 = fadd float %254, %257, !dbg !37
  %259 = bitcast float %258 to i32, !dbg !31
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !31
  %261 = bitcast i32 %260 to float, !dbg !31
  %262 = fadd float %258, %261, !dbg !37
  %263 = bitcast float %262 to i32, !dbg !31
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 2, i32 31), !dbg !31
  %265 = bitcast i32 %264 to float, !dbg !31
  %266 = fadd float %262, %265, !dbg !37
  %267 = bitcast float %266 to i32, !dbg !31
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !31
  %269 = bitcast i32 %268 to float, !dbg !31
  %270 = fadd float %266, %269, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, float %270, i1 %142) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %271 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %148, i1 %146) #3, !dbg !31
  %272 = bitcast float %271 to i32, !dbg !31
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !31
  %274 = bitcast i32 %273 to float, !dbg !31
  %275 = fadd float %271, %274, !dbg !37
  %276 = bitcast float %275 to i32, !dbg !31
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !31
  %278 = bitcast i32 %277 to float, !dbg !31
  %279 = fadd float %275, %278, !dbg !37
  %280 = bitcast float %279 to i32, !dbg !31
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !31
  %282 = bitcast i32 %281 to float, !dbg !31
  %283 = fadd float %279, %282, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, float %283, i1 %151) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %284 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %152) #3, !dbg !35
  %286 = insertelement <2 x float> poison, float %284, i64 0, !dbg !39
  %287 = shufflevector <2 x float> %286, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !39
  %288 = fmul <2 x float> %230, %287, !dbg !39
  %289 = fmul <2 x float> %210, %287, !dbg !39
  %290 = fmul <2 x float> %190, %287, !dbg !39
  %291 = fmul <2 x float> %168, %287, !dbg !39
  %292 = fsub <2 x float> %235, %288, !dbg !40
  %293 = fsub <2 x float> %214, %289, !dbg !40
  %294 = fsub <2 x float> %194, %290, !dbg !40
  %295 = fsub <2 x float> %174, %291, !dbg !40
  %296 = insertelement <2 x float> poison, float %285, i64 0, !dbg !41
  %297 = shufflevector <2 x float> %296, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %298 = fmul <2 x float> %297, %292, !dbg !41
  %299 = fmul <2 x float> %297, %293, !dbg !41
  %300 = fmul <2 x float> %297, %294, !dbg !41
  %301 = fmul <2 x float> %297, %295, !dbg !41
  %302 = fptrunc <2 x float> %298 to <2 x half>, !dbg !42
  %303 = fptrunc <2 x float> %299 to <2 x half>, !dbg !42
  %304 = fptrunc <2 x float> %300 to <2 x half>, !dbg !42
  %305 = fptrunc <2 x float> %301 to <2 x half>, !dbg !42
  %306 = fmul <2 x float> %86, %173, !dbg !36
  %307 = fmul <2 x float> %85, %287, !dbg !39
  %308 = fsub <2 x float> %306, %307, !dbg !40
  %309 = fmul <2 x float> %297, %308, !dbg !41
  %310 = fptrunc <2 x float> %309 to <2 x half>, !dbg !42
  %311 = fmul <2 x float> %104, %173, !dbg !36
  %312 = fmul <2 x float> %103, %287, !dbg !39
  %313 = fsub <2 x float> %311, %312, !dbg !40
  %314 = fmul <2 x float> %297, %313, !dbg !41
  %315 = fptrunc <2 x float> %314 to <2 x half>, !dbg !42
  %316 = fmul <2 x float> %122, %173, !dbg !36
  %317 = fmul <2 x float> %121, %287, !dbg !39
  %318 = fsub <2 x float> %316, %317, !dbg !40
  %319 = fmul <2 x float> %297, %318, !dbg !41
  %320 = fptrunc <2 x float> %319 to <2 x half>, !dbg !42
  %321 = fmul <2 x float> %140, %173, !dbg !36
  %322 = fmul <2 x float> %139, %287, !dbg !39
  %323 = fsub <2 x float> %321, %322, !dbg !40
  %324 = fmul <2 x float> %297, %323, !dbg !41
  %325 = fptrunc <2 x float> %324 to <2 x half>, !dbg !42
  %326 = bitcast <2 x half> %302 to i32, !dbg !42
  %327 = bitcast <2 x half> %303 to i32, !dbg !42
  %328 = bitcast <2 x half> %304 to i32, !dbg !42
  %329 = bitcast <2 x half> %305 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %327, i32 %328, i32 %329, ptr addrspace(1) %29, i1 %18) #3, !dbg !42
  %330 = shufflevector <2 x half> %310, <2 x half> poison, <2 x i32> <i32 1, i32 0>, !dbg !42
  %331 = bitcast <2 x half> %330 to i32, !dbg !42
  %332 = shufflevector <2 x half> %315, <2 x half> poison, <2 x i32> <i32 1, i32 0>, !dbg !42
  %333 = bitcast <2 x half> %332 to i32, !dbg !42
  %334 = shufflevector <2 x half> %320, <2 x half> poison, <2 x i32> <i32 1, i32 0>, !dbg !42
  %335 = bitcast <2 x half> %334 to i32, !dbg !42
  %336 = shufflevector <2 x half> %325, <2 x half> poison, <2 x i32> <i32 1, i32 0>, !dbg !42
  %337 = bitcast <2 x half> %336 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %333, i32 %335, i32 %337, ptr addrspace(1) %31, i1 %19) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rms_layernorm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/unsloth/kernels")
!4 = !{ptr @_rms_layernorm_backward, !"kernel", i32 1}
!5 = !{ptr @_rms_layernorm_backward, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_rms_layernorm_backward", linkageName: "_rms_layernorm_backward", scope: !3, file: !3, line: 58, type: !8, scopeLine: 58, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 74, column: 28, scope: !7)
!11 = !DILocation(line: 75, column: 31, scope: !7)
!12 = !DILocation(line: 76, column: 25, scope: !7)
!13 = !DILocation(line: 78, column: 20, scope: !7)
!14 = !DILocation(line: 78, column: 10, scope: !7)
!15 = !DILocation(line: 79, column: 21, scope: !7)
!16 = !DILocation(line: 79, column: 10, scope: !7)
!17 = !DILocation(line: 80, column: 10, scope: !7)
!18 = !DILocation(line: 85, column: 26, scope: !7)
!19 = !DILocation(line: 85, column: 21, scope: !7)
!20 = !DILocation(line: 86, column: 26, scope: !7)
!21 = !DILocation(line: 86, column: 21, scope: !7)
!22 = !DILocation(line: 87, column: 26, scope: !7)
!23 = !DILocation(line: 87, column: 21, scope: !7)
!24 = !DILocation(line: 90, column: 22, scope: !7)
!25 = !DILocation(line: 85, column: 66, scope: !7)
!26 = !DILocation(line: 86, column: 66, scope: !7)
!27 = !DILocation(line: 87, column: 66, scope: !7)
!28 = !DILocation(line: 91, column: 21, scope: !7)
!29 = !DILocation(line: 94, column: 30, scope: !7)
!30 = !DILocation(line: 96, column: 37, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/triton/language")
!34 = !DILocation(line: 96, column: 30, scope: !7)
!35 = !DILocation(line: 97, column: 21, scope: !7)
!36 = !DILocation(line: 97, column: 38, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !34)
!38 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!39 = !DILocation(line: 97, column: 52, scope: !7)
!40 = !DILocation(line: 97, column: 45, scope: !7)
!41 = !DILocation(line: 97, column: 31, scope: !7)
!42 = !DILocation(line: 98, column: 31, scope: !7)
!43 = !DILocation(line: 98, column: 4, scope: !7)
